{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\J_Dun\\\\OneDrive\\\\Documents\\\\GitHub\\\\OH-Helper\\\\oh-helper-frontend\\\\src\\\\Components\\\\StudentView.jsx\";\nimport React from \"react\";\nimport Button from \"./Button.jsx\";\nimport TATile from \"./TATile.jsx\";\nimport Ticket from \"./Ticket.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar socket;\n\nclass StudentView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.questionOnChanged = event => {\n      this.setState({\n        question: event.target.value\n      });\n    };\n\n    this.priorityOnChanged = event => {\n      //this is convuluted but i refuse to make a second static object\n      var grabPriority = Object.keys(this.state.priorityLevels).filter(level => {\n        return this.state.priorityLevels[level] === event.target.value;\n      });\n      this.setState({\n        currentPriority: grabPriority[0]\n      });\n    };\n\n    this.submitQuestion = () => {\n      var ticketData = {\n        Name: this.props.name,\n        Issue: this.state.question,\n        Label: this.state.currentPriority,\n        Action: \"Add\"\n      };\n      socket.send(JSON.stringify(ticketData));\n    };\n\n    this.state = {\n      ticket: [],\n      activeTAs: [],\n      student: true,\n      question: \"\",\n      questionMaxLength: 100,\n      questionMinLength: 20,\n      priorityLevels: {\n        0: \"Homework\",\n        1: \"Exam\",\n        2: \"Lab\",\n        3: \"Lecture\"\n      },\n      currentPriority: 0\n    };\n  }\n\n  componentDidMount() {\n    socket = new WebSocket(\"ws://localhost:8000/websocket\");\n    socket.addEventListener(\"open\", event => {\n      console.log(\"Websocket Connected!\");\n    });\n    socket.addEventListener(\"message\", event => {\n      var data = JSON.parse(event.data);\n      console.log(data);\n      this.setState({\n        ticket: data[\"Queue\"]\n      });\n    });\n    socket.addEventListener(\"close\", event => {\n      console.log(\"Websocket Disconnected!\");\n    });\n    fetch(\"/getStudents\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(\"\")\n    }).then(response => {\n      if (response.ok === false) {\n        alert(\"Error: Couldn't connect to server\");\n        return \"\";\n      } else {\n        return response.json();\n      }\n    }).then(data => {\n      if (data === \"\") {\n        return;\n      }\n\n      var taList = [];\n      data.map(student => {\n        if (student.accType === true) {\n          taList.push(student);\n        }\n      });\n      this.setState({\n        activeTAs: taList\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"studentViewContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"studentQueueContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"student headerText\",\n          children: \"Student Queue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"studentQueueWindow\",\n          children: this.state.ticket.map(ticket => {\n            return /*#__PURE__*/_jsxDEV(Ticket, {\n              name: ticket.Name,\n              question: ticket.Message,\n              priority: ticket.Priority,\n              priorityLevels: this.state.priorityLevels\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rightMasterStudent\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"welcomeStudent\",\n          children: \"Welcome, \" + this.props.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"activeTA headerText\",\n          children: \"Active TA's\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"activeTAWindow\",\n          children: this.state.activeTAs.map(ta => {\n            return /*#__PURE__*/_jsxDEV(TATile, {\n              name: ta.name,\n              special: ta.specialties\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 22\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"newQuestionContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"newQuestionHeader\",\n            children: \"New Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"charCount\",\n            children: [\"Min: \", this.state.question.length, \"/\", this.state.questionMinLength, \" \", \"Max: \", this.state.question.length, \"/\", this.state.questionMaxLength]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            type: \"text\",\n            className: \"newQuestionInput\",\n            placeholder: \"Write question here...\",\n            maxLength: this.state.questionMaxLength,\n            minLength: this.state.questionMinLength,\n            onChange: this.questionOnChanged\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"studentButtonContainer\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              active: true,\n              text: \"Post\",\n              buttonType: \"postButton\",\n              onclick: this.submitQuestion\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"priorityDropdown\",\n              onChange: this.priorityOnChanged,\n              children: Object.values(this.state.priorityLevels).map(key => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  className: \"priorityOption\",\n                  value: key,\n                  children: key\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default StudentView;","map":{"version":3,"sources":["C:/Users/J_Dun/OneDrive/Documents/GitHub/OH-Helper/oh-helper-frontend/src/Components/StudentView.jsx"],"names":["React","Button","TATile","Ticket","socket","StudentView","Component","constructor","props","questionOnChanged","event","setState","question","target","value","priorityOnChanged","grabPriority","Object","keys","state","priorityLevels","filter","level","currentPriority","submitQuestion","ticketData","Name","name","Issue","Label","Action","send","JSON","stringify","ticket","activeTAs","student","questionMaxLength","questionMinLength","componentDidMount","WebSocket","addEventListener","console","log","data","parse","fetch","method","headers","body","then","response","ok","alert","json","taList","map","accType","push","render","Message","Priority","ta","specialties","length","values","key"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Button from \"./Button.jsx\";\r\nimport TATile from \"./TATile.jsx\";\r\nimport Ticket from \"./Ticket.jsx\";\r\n\r\nvar socket;\r\n\r\nclass StudentView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ticket: [],\r\n      activeTAs: [],\r\n      student: true,\r\n      question: \"\",\r\n      questionMaxLength: 100,\r\n      questionMinLength: 20,\r\n      priorityLevels: { 0: \"Homework\", 1: \"Exam\", 2: \"Lab\", 3: \"Lecture\" },\r\n      currentPriority: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    socket = new WebSocket(\"ws://localhost:8000/websocket\");\r\n\r\n    socket.addEventListener(\"open\", (event) => {\r\n      console.log(\"Websocket Connected!\");\r\n    });\r\n\r\n    socket.addEventListener(\"message\", (event) => {\r\n      var data = JSON.parse(event.data);\r\n      console.log(data);\r\n      this.setState({ ticket: data[\"Queue\"] });\r\n    });\r\n\r\n    socket.addEventListener(\"close\", (event) => {\r\n      console.log(\"Websocket Disconnected!\");\r\n    });\r\n\r\n    fetch(\"/getStudents\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(\"\"),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok === false) {\r\n          alert(\"Error: Couldn't connect to server\");\r\n          return \"\";\r\n        } else {\r\n          return response.json();\r\n        }\r\n      })\r\n      .then((data) => {\r\n        if (data === \"\") {\r\n          return;\r\n        }\r\n        var taList = [];\r\n        data.map((student) => {\r\n          if (student.accType === true) {\r\n            taList.push(student);\r\n          }\r\n        });\r\n\r\n        this.setState({ activeTAs: taList });\r\n      });\r\n  }\r\n\r\n  questionOnChanged = (event) => {\r\n    this.setState({ question: event.target.value });\r\n  };\r\n\r\n  priorityOnChanged = (event) => {\r\n    //this is convuluted but i refuse to make a second static object\r\n    var grabPriority = Object.keys(this.state.priorityLevels).filter(\r\n      (level) => {\r\n        return this.state.priorityLevels[level] === event.target.value;\r\n      }\r\n    );\r\n    this.setState({ currentPriority: grabPriority[0] });\r\n  };\r\n\r\n  submitQuestion = () => {\r\n    var ticketData = {\r\n      Name: this.props.name,\r\n      Issue: this.state.question,\r\n      Label: this.state.currentPriority,\r\n      Action: \"Add\",\r\n    };\r\n    socket.send(JSON.stringify(ticketData));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"studentViewContainer\">\r\n        <div className=\"studentQueueContainer\">\r\n          <div className=\"student headerText\">Student Queue</div>\r\n          <div className=\"studentQueueWindow\">\r\n            {this.state.ticket.map((ticket) => {\r\n              return (\r\n                <Ticket\r\n                  name={ticket.Name}\r\n                  question={ticket.Message}\r\n                  priority={ticket.Priority}\r\n                  priorityLevels={this.state.priorityLevels}\r\n                ></Ticket>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div className=\"rightMasterStudent\">\r\n          <div className=\"welcomeStudent\">{\"Welcome, \" + this.props.name}</div>\r\n          <div className=\"activeTA headerText\">Active TA's</div>\r\n          <div className=\"activeTAWindow\">\r\n            {this.state.activeTAs.map((ta) => {\r\n              return <TATile name={ta.name} special={ta.specialties} />;\r\n            })}\r\n          </div>\r\n          <div className=\"newQuestionContainer\">\r\n            <div className=\"newQuestionHeader\">New Question</div>\r\n            <p className=\"charCount\">\r\n              Min: {this.state.question.length}/{this.state.questionMinLength}{\" \"}\r\n              Max: {this.state.question.length}/{this.state.questionMaxLength}\r\n            </p>\r\n            <textarea\r\n              type=\"text\"\r\n              className=\"newQuestionInput\"\r\n              placeholder=\"Write question here...\"\r\n              maxLength={this.state.questionMaxLength}\r\n              minLength={this.state.questionMinLength}\r\n              onChange={this.questionOnChanged}\r\n            ></textarea>\r\n            <div className=\"studentButtonContainer\">\r\n              <Button\r\n                active={true}\r\n                text=\"Post\"\r\n                buttonType=\"postButton\"\r\n                onclick={this.submitQuestion}\r\n              ></Button>\r\n              <select\r\n                className=\"priorityDropdown\"\r\n                onChange={this.priorityOnChanged}\r\n              >\r\n                {Object.values(this.state.priorityLevels).map((key) => {\r\n                  return (\r\n                    <option className=\"priorityOption\" value={key}>\r\n                      {key}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StudentView;\r\n"]},"metadata":{},"sourceType":"module"}